-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")

-- Variables
local Mouse = LocalPlayer:GetMouse()
local LockedTarget = nil
local lastShotTime = 0
local os_clock = os.clock
local HoldingKey = false
local lastSelectedTarget = nil

--------------------------------------

local function GetGunSpreadReduction(weaponName)
    if not retard['Global']['Enabled'] then
        return 0 
    end
    local spreadSettings = retard['Weapon Mods']['Spread Control']
    if not spreadSettings['Enabled'] then
        return 0
    end
    return spreadSettings[weaponName] and (spreadSettings[weaponName]['Multiplier'] * 100) or 0
end

local Old; Old = hookfunction(math.random, function(...)
    if checkcaller() then
        return Old(...)
    end

    local Caller = getcallingscript()
    if not retard['Global']['Enabled'] or not HoldingKey then  -- âœ… Spread only works while keybind is active
        return Old(...)
    end

    if Caller and Caller.Parent and retard['Weapon Mods']['Spread Control'][Caller.Parent.Name] and select("#", ...) == 0 then
        local weaponName = Caller.Parent.Name
        local originalSpread = Old(...)
        getgenv().Reduction = GetGunSpreadReduction(weaponName) 
        local modifiedSpread = originalSpread * (1 - (Reduction / 100))
        if retard['Global']['Debug'] then
            print("Modified Spread (While Holding Keybind): " .. modifiedSpread)
        end

        return modifiedSpread
    end

    return Old(...)
end)

--------------------------------------------

local function canShoot()
    local currentTime = os_clock()
    local delay = retard['Triggerbot']['Delay']

    if currentTime - lastShotTime >= delay then
        lastShotTime = currentTime
        return true
    end

    return false
end

local function performChecks(player, character, toolName)
    local checks = retard['Checks']

    -- âœ… Self Knocked Check (Prevents selecting OR shooting when knocked)
    if checks['Activation']['Self-Knocked'] then
        local bodyEffects = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("BodyEffects")
        if bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value then
            return false, "You are knocked"
        end
    end

    -- âœ… Knocked Check (Prevents targeting knocked players)
    if checks['Activation']['Knocked'] then
        local bodyEffects = character:FindFirstChild("BodyEffects")
        if bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value then
            return false, "Target is knocked"
        end
    end

    -- âœ… Crew Check (Prevents targeting players in the same crew)
    if checks['Activation']['CrewCheck'] then
        local targetData = player:FindFirstChild("DataFolder")
        local localData = LocalPlayer:FindFirstChild("DataFolder")

        if targetData and localData then
            local targetCrew = targetData:FindFirstChild("Information") and targetData.Information:FindFirstChild("Crew")
            local localCrew = localData:FindFirstChild("Information") and localData.Information:FindFirstChild("Crew")

            if targetCrew and localCrew and targetCrew.Value ~= "" and localCrew.Value ~= "" then
                if targetCrew.Value == localCrew.Value then
                    return false, "Player is in the same crew"
                end
            end
        end
    end

    -- âœ… Forcefield Check (Prevents targeting spawn-protected players)
    if checks['Activation']['ForceField'] then
        if character:FindFirstChildOfClass("ForceField") then
            return false, "Target has spawn protection (ForceField)"
        end
    end

    -- âœ… Knife Check (Prevents shooting while holding a knife)
    if checks['Activation']['KnifeCheck'] then
        if toolName == "[Knife]" or toolName == "Knife" then
            return false, "Knife tool is equipped"
        end
    end

    return true, "All checks passed"
end


local function getTargetUnderCrosshair()
    local mouseTarget = Mouse.Target
    if mouseTarget then
        local player = Players:GetPlayerFromCharacter(mouseTarget.Parent)
        return player
    end
    return nil
end

local function getClosestTargetToCursor()
    local closestTarget = nil
    local smallestDistance = math.huge
    local mousePosition = UserInputService:GetMouseLocation()

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local targetPart = player.Character:FindFirstChild("HumanoidRootPart")
            local screenPosition, onScreen = workspace.CurrentCamera:WorldToViewportPoint(targetPart.Position)

            if onScreen then
                local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - mousePosition).Magnitude
                if distance < smallestDistance then
                    smallestDistance = distance
                    closestTarget = player
                end
            end
        end
    end

    return closestTarget
end

local function selectTarget()
    if retard['Triggerbot']['TargetMode'] == "Auto" then
        return getClosestTargetToCursor()
    elseif retard['Triggerbot']['TargetMode'] == "Select" then
        if LockedTarget and HoldingKey then
            return LockedTarget  
        else
            local newTarget = getClosestTargetToCursor() -- âœ… Get the closest target near your mouse
            if newTarget and HoldingKey then
                local camLookVector = workspace.CurrentCamera.CFrame.LookVector
                local targetDirection = (newTarget.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).unit
                local dotProduct = camLookVector:Dot(targetDirection)

                if dotProduct > 0 then -- âœ… Ensures target is in front of your character
                    LockedTarget = newTarget
                end
            elseif not HoldingKey then -- âœ… Unselect target ONLY if not holding the key
                LockedTarget = nil
            end
            return LockedTarget
        end
    end
end

local function isMouseOverTarget(player)
    if not player or not player.Character then return false end
    local targetParts = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"}

    for _, partName in pairs(targetParts) do
        local part = player.Character:FindFirstChild(partName)
        if part and Mouse.Target == part then
            return true
        end
    end
    return false
end

local Methods = {}

Methods['MouseClick'] = function()
    while HoldingKey and isMouseOverTarget(LockedTarget) do
        mouse1press()
        task.wait(0.0001) -- ðŸ”¥ Super fast fire rate, near-instant reaction
        mouse1release()
        task.wait(0.0001) -- ðŸ”¥ Ensures non-stop spam firing
    end
end

Methods['VirtualInput'] = function()
    local mouseLocation = UserInputService:GetMouseLocation()
    local mouseX, mouseY = math.floor(mouseLocation.X), math.floor(mouseLocation.Y)

    task.spawn(function()
        while HoldingKey and isMouseOverTarget(LockedTarget) do
            VirtualInputManager:SendMouseButtonEvent(mouseX, mouseY, 0, true, nil, 0) 
            task.wait(0.0001) -- ðŸ”¥ Instant fire delay
            VirtualInputManager:SendMouseButtonEvent(mouseX, mouseY, 0, false, nil, 0) 
            task.wait(0.0001) -- ðŸ”¥ Zero missed shots
        end
    end)
end

local function executeTriggerbot()
    if not retard['Triggerbot']['Enabled'] or not HoldingKey then
        LockedTarget = nil
        return
    end

    local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
    local toolName = tool and tool.Name or ""

    -- Ensure valid weapon is equipped
    if not retard['Triggerbot']['Weapons'][toolName] then
        return
    end

    local player = LockedTarget or getTargetUnderCrosshair()

    if player and player.Character then
        local isValid, _ = performChecks(player, player.Character, toolName)

        -- âœ… **Shoot instantly when the crosshair is over ANY part of the target**
        if isValid and isMouseOverTarget(player) then
            LockedTarget = player
            task.spawn(function()
                Methods[retard['Triggerbot']['Method']]()
            end)
        end
    end
end



UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode[retard['Global']['Keybind']] then
        -- âœ… Hold Mode: Works Exactly Like Before
        if retard['Global']['Mode'] == "Hold" then
            HoldingKey = true
            retard['Triggerbot']['Enabled'] = true
        end

        -- âœ… Toggle Mode: Works Exactly Like Hold Mode (No More Issues)
        if retard['Global']['Mode'] == "Toggle" then
            retard['Triggerbot']['Enabled'] = not retard['Triggerbot']['Enabled']
            HoldingKey = retard['Triggerbot']['Enabled']
        end

        -- âœ… Handles Target Selection for Select Mode
        if retard['Triggerbot']['TargetMode'] == "Select" then
            local mouseTarget = Mouse.Target
            if mouseTarget then
                local player = Players:GetPlayerFromCharacter(mouseTarget.Parent)
                if player and player ~= LockedTarget then
                    local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
                    local toolName = tool and tool.Name or ""

                    if not retard['Triggerbot']['Weapons'][toolName] then
                        return
                    end

                    local isValid, _ = performChecks(player, player.Character, toolName)
                    if isValid then
                        LockedTarget = player
                    end
                end
            end
        end
    end
end)


UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode[retard['Global']['Keybind']] then
        -- âœ… Hold Mode: Turns Off When Key Released
        if retard['Global']['Mode'] == "Hold" then
            HoldingKey = false
            retard['Triggerbot']['Enabled'] = false
        end

        -- âœ… Unselect Target Properly for Select Mode
        if retard['Triggerbot']['TargetMode'] == "Select" and LockedTarget then
            LockedTarget = nil
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if HoldingKey and retard['Triggerbot']['Enabled'] then 
        executeTriggerbot()
    end
end)
